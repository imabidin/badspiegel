# PHP Dokumentations-Leitfaden f√ºr BadSpiegel Theme

Dieser Leitfaden definiert die Standards f√ºr PHP-Dokumentation im BadSpiegel WordPress Theme, basierend auf den bew√§hrten Praktiken aus `modal.php`.

DOKUMENTIERE IN ENGLISCH!!!

## 1. Datei-Header Dokumentation

### Vollst√§ndiger Datei-Header
Jede PHP-Datei sollte einen umfassenden Header haben:

```php
<?php

/**
 * [Kurze Beschreibung der Datei-Funktion]
 *
 * [Detaillierte Beschreibung der Funktionalit√§t, Features und Zweck]
 *
 * @version [Versionsnummer]
 *
 * @todo [Geplante Verbesserungen oder bekannte Probleme]
 *
 * Features:
 * - [Feature 1 mit kurzer Beschreibung]
 * - [Feature 2 mit kurzer Beschreibung]
 * - [etc.]
 *
 * Security Measures:
 * - [Sicherheitsma√ünahme 1]
 * - [Sicherheitsma√ünahme 2]
 * - [etc.]
 *
 * Performance Features:
 * - [Performance-Feature 1]
 * - [Performance-Feature 2]
 * - [etc.]
 *
 * Supported [Request Types/Functions/etc.]:
 * - [Type 1]: [Beschreibung]
 * - [Type 2]: [Beschreibung]
 *
 * Required [Parameters/Dependencies/etc.]:
 * - [Requirement 1]: [Beschreibung]
 * - [Requirement 2]: [Beschreibung]
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit('Direct access denied.');
}
```
 * - [Sicherheitsma√ünahme 2]
 * - [etc.]
 *
 * Performance Features:
 * - [Performance-Feature 1]
 * - [Performance-Feature 2]
 * - [etc.]
 *
 * Supported [Request Types/Functions/etc.]:
 * - [Type 1]: [Beschreibung]
 * - [Type 2]: [Beschreibung]
 *
 * Required [Parameters/Dependencies/etc.]:
 * - [Requirement 1]: [Beschreibung]
 * - [Requirement 2]: [Beschreibung]
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit('Direct access denied.');
}
```

### PHP-√ñffnungs-Tag und Security Check
**Standardformat f√ºr alle PHP-Dateien:**

```php
<?php defined('ABSPATH') || exit;
```

**Vorteile:**
- ‚úÖ **Kompakt**: Eine Zeile statt drei
- ‚úÖ **Sicher**: Direkter Zugriff sofort verhindert
- ‚úÖ **Konsistent**: Einheitlicher Standard f√ºr alle Dateien
- ‚úÖ **Performance**: Keine zus√§tzlichen Zeilen

**Alternative (wenn mehr Klarheit gew√ºnscht):**
```php
<?php

// Prevent direct access
if (!defined('ABSPATH')) {
    exit('Direct access denied.');
}
```

### Versionierung
- Verwenden Sie semantische Versionierung (z.B. 2.4.0)
- Erh√∂hen Sie die Version bei bedeutenden √Ñnderungen
- Dokumentieren Sie √Ñnderungen in @todo oder separaten Changelog

### @since Dokumentation
**Regel f√ºr @since Tags:**
- ‚ùå **NICHT hinzuf√ºgen** bei neuen Dateien oder Funktionen
- ‚úÖ **NICHT entfernen** falls bereits vorhanden
- üéØ **Fokus auf @version** f√ºr Versionskontrolle

**Begr√ºndung:**
- @since ist historisch und bei neuen Entwicklungen weniger relevant
- @version bietet bessere Kontrolle √ºber √Ñnderungszyklen
- Bestehende @since Tags bleiben f√ºr Kompatibilit√§t erhalten

## 2. Code-Struktur und Sektionen

### Single-Function Dateien (WICHTIG!)
**Bei Dateien mit nur einer Funktion:**
- ‚úÖ **Ein einziger DocBlock** als Datei-Header UND Funktions-Dokumentation
- ‚ùå **NICHT** separate Sektions-Trennung verwenden
- ‚ùå **NICHT** doppelte Dokumentation (Datei + Funktion)

```php
<?php defined('ABSPATH') || exit;

/**
 * [Datei-Titel und Funktionsbeschreibung in einem]
 *
 * [Kombinierte Beschreibung der Datei UND der einzigen Funktion]
 *
 * @version [Versionsnummer]
 * @return [Return-Type] [Beschreibung]
 */

function single_function() {
    // Direkter Code ohne zus√§tzliche DocBlock
}
```

### Multi-Function Dateien
Nur bei **mehreren Funktionen** verwenden Sie Sektions-Trennung:

```php
// =============================================================================
// SEKTIONS-NAME (Gro√übuchstaben)
// =============================================================================
```

### Empfohlene Sektions-Reihenfolge
1. **AJAX HOOKS REGISTRATION** - Hook-Registrierungen
2. **CORE UTILITY FUNCTIONS** - Grundlegende Hilfsfunktionen
3. **SECURITY & VALIDATION FUNCTIONS** - Sicherheit und Validierung
4. **CONTEXT FUNCTIONS** - Kontext-spezifische Funktionen
5. **SPECIFIC HANDLERS** - Spezifische Handler-Funktionen
6. **MAIN HANDLERS** - Haupt-Handler-Funktionen
7. **UTILITY & MAINTENANCE FUNCTIONS** - Wartung und Utilities
8. **DEVELOPMENT HOOKS** - Debug-spezifische Hooks

## 3. Funktions-Dokumentation

### Standard DocBlock Format

```php
/**
 * [Kurze Funktionsbeschreibung]
 *
 * [Detaillierte Beschreibung der Funktionalit√§t, des Zwecks und der
 * Implementierung. Erkl√§ren Sie komplexe Logik und Entscheidungen.]
 *
 * [Spezifische Abschnitte je nach Funktionstyp:]
 *
 * Security Features: (f√ºr sicherheitskritische Funktionen)
 * - [Sicherheitsfeature 1]
 * - [Sicherheitsfeature 2]
 *
 * Validation Checks: (f√ºr Validierungsfunktionen)
 * 1. [Check 1 mit Beschreibung]
 * 2. [Check 2 mit Beschreibung]
 *
 * Performance Features: (f√ºr performance-kritische Funktionen)
 * - [Performance-Feature 1]
 * - [Performance-Feature 2]
 *
 * Dependencies: [function1(), function2()] (wenn vorhanden)
 *
 * @param string|int|array $param_name Parameter description
 * @param bool $optional_param Optional parameter (default: value)
 * @return type|WP_Error Return description
 *
 * @example
 * $result = function_name('example');
 * if (is_wp_error($result)) {
 *     handle_error($result);
 * }
 * // $result = 'expected output'
 */
```

### Parameter-Dokumentation
- **Typ angeben**: `string|int|array` f√ºr multiple Typen
- **Required/Optional kennzeichnen**: Standardwerte in Beschreibung
- **WP_Error handling**: Immer erw√§hnen wenn Funktion WP_Error zur√ºckgeben kann

### Return-Dokumentation
- **M√∂gliche R√ºckgabe-Typen** auflisten
- **Error-Handling** explizit beschreiben
- **Beispiel-R√ºckgabewerte** in @example zeigen

## 4. Sicherheits-Dokumentation

### Security Measures Sektion
Dokumentieren Sie alle Sicherheitsma√ünahmen:

```php
/**
 * Security Measures:
 * - CSRF protection via WordPress nonce verification
 * - File extension whitelist (HTML only)
 * - Path sanitization and validation
 * - Rate limiting (30 requests per minute per IP)
 * - Directory traversal prevention
 * - File existence and readability checks
 * - Session-based rate limiting with IP tracking
 */
```

### Sicherheitskritische Funktionen
- **Validation Pipeline** dokumentieren
- **Input Sanitization** beschreiben
- **Access Control** erkl√§ren
- **Rate Limiting** spezifizieren

## 5. Performance-Dokumentation

### Caching-Strategien
```php
/**
 * Caching Strategy:
 * - Cache key includes file path and modification time for auto-invalidation
 * - 1-hour cache TTL (3600 seconds)
 * - Uses WordPress object cache with 'modal_files' group
 * - Safe file inclusion with output buffering
 */
```

### Performance Features
- **Caching-Mechanismen** erkl√§ren
- **Memory Usage** optimierungen
- **Database Queries** minimierung
- **Load Time** verbesserungen

## 6. Beispiel-Dokumentation

### Praktische Beispiele
F√ºgen Sie immer @example Bl√∂cke hinzu:

```php
/**
 * @example
 * $file_path = validate_file_path('contact_de');
 * if (is_wp_error($file_path)) {
 *     return send_modal_error($file_path);
 * }
 * // $file_path = '/path/to/theme/html/contact_de.html'
 */
```

### Use Cases
Dokumentieren Sie konkrete Anwendungsf√§lle:

```php
/**
 * Use Cases:
 * - Development content updates
 * - Cache debugging and troubleshooting
 * - Manual cache invalidation after bulk content changes
 * - System maintenance and cleanup
 */
```

## 7. Error Handling Dokumentation

### WP_Error Integration
```php
/**
 * @param string $error Error message or WP_Error object
 * @param int $code HTTP status code (default: 400)
 * @return void Outputs JSON error response and exits
 *
 * @example
 * send_modal_error('File not found', 404);
 * send_modal_error($wp_error_object);
 */
```

### Error Response Format
Dokumentieren Sie Response-Strukturen:

```php
/**
 * Response Format:
 * - JSON error response with message and status code
 * - Proper HTTP status headers
 * - Consistent error structure for frontend handling
 */
```

## 8. AJAX Handler Dokumentation

### Request Processing Pipeline
```php
/**
 * Request Processing Pipeline:
 * 1. Security validation (rate limiting + nonce verification)
 * 2. File parameter validation and sanitization
 * 3. File path security checks and validation
 * 4. Content loading with caching
 * 5. Success response with content
 */
```

### Expected Parameters
```php
/**
 * Expected POST Parameters:
 * - action: 'load_modal_file'
 * - nonce: WordPress nonce (modal_content_nonce)
 * - file_name: Relative path to HTML file (auto-appends .html if missing)
 */
```

## 9. WordPress Integration

### Hook-Dokumentation
```php
/**
 * Register AJAX handlers for modal content requests
 *
 * Registers both authenticated and non-authenticated AJAX handlers for:
 * - File modal content loading (HTML files)
 * - Image modal content loading (WordPress attachments)
 *
 * Handler Registration:
 * - wp_ajax_load_modal_file: For logged-in users
 * - wp_ajax_nopriv_load_modal_file: For non-logged-in users
 */
```

### WordPress Standards
- **Hook-Namen** explizit dokumentieren
- **Capability Requirements** beschreiben
- **WordPress Functions** die verwendet werden auflisten

## 10. Debugging und Development

### Debug-Modus Features
```php
if (defined('WP_DEBUG') && WP_DEBUG) {
    /**
     * Development-only functionality and debugging hooks
     *
     * Debug Features:
     * - Request logging for modal file requests
     * - Error tracking and detailed logging
     * - Performance monitoring hooks
     * - Development-specific error reporting
     *
     * Security Note:
     * These hooks are automatically disabled in production environments
     * when WP_DEBUG is false.
     */
}
```

### Production vs Development
- **Debug-Code** klar kennzeichnen
- **Production Mode** unterscheiden
- **Security Implications** von Debug-Features erw√§hnen

## 11. Checkliste f√ºr neue PHP-Dateien

### Single-Function Dateien:
- [ ] Kompakte PHP-√ñffnung: `<?php defined('ABSPATH') || exit;`
- [ ] Ein einziger DocBlock (Datei + Funktion kombiniert)
- [ ] Keine redundante Sektions-Trennung
- [ ] Keine doppelte Dokumentation
- [ ] **Wichtige Inline-Kommentare beibehalten** (Business Logic, Sicherheit, Performance)
- [ ] **Deutsche Kommentare ins Englische √ºbersetzen**
- [ ] **√úberfl√ºssige Kommentare entfernen** (offensichtliche Syntax)
- [ ] @example nur bei komplexen Funktionen
- [ ] @since NICHT hinzuf√ºgen (aber nicht entfernen falls vorhanden)

### Multi-Function Dateien:
- [ ] Kompakte PHP-√ñffnung: `<?php defined('ABSPATH') || exit;`
- [ ] Vollst√§ndiger Datei-Header mit Versionsnummer
- [ ] Klare Sektions-Trennung
- [ ] Jede Funktion hat vollst√§ndige DocBlock-Dokumentation
- [ ] **Wichtige Inline-Kommentare in allen Funktionen beibehalten**
- [ ] **Deutsche Kommentare ins Englische √ºbersetzen**
- [ ] Sicherheitsma√ünahmen dokumentiert
- [ ] Performance-Features beschrieben
- [ ] @example Bl√∂cke f√ºr komplexe Funktionen
- [ ] Dependencies explizit aufgelistet
- [ ] Error Handling dokumentiert
- [ ] WordPress Integration Standards befolgt
- [ ] @since NICHT hinzuf√ºgen (aber nicht entfernen falls vorhanden)

### DRY-Compliance Check:
- [ ] Keine redundanten Informationen zwischen Datei-Header und Funktionen
- [ ] Dependencies nur einmal dokumentiert
- [ ] Technische Details nicht mehrfach erw√§hnt
- [ ] @example nur wo wirklich n√∂tig
- [ ] **Wichtige Inline-Kommentare BEIBEHALTEN** (siehe Abschnitt Inline-Kommentare)

## 12. Inline-Kommentare innerhalb von Funktionen (WICHTIG!)

### Was BEIBEHALTEN werden soll:

**‚úÖ Wichtige Inline-Kommentare die erkl√§rt werden m√ºssen:**
- **Komplexe Logik**: Warum bestimmte Entscheidungen getroffen wurden
- **Business Logic**: Spezifische Regeln oder Berechnungen
- **Sicherheitschecks**: Warum bestimmte Validierungen notwendig sind
- **Performance Optimierungen**: Cache-Strategien, Datenbankoptimierungen
- **WordPress-spezifische Implementierungen**: Hooks, Filters, Custom Fields
- **Tempor√§re Workarounds**: Mit Erkl√§rung warum sie notwendig sind
- **Konfigurationswerte**: Warum bestimmte Werte gew√§hlt wurden

```php
function woocommerce_template_loop_favourite_button() {
    global $product;

    $product_id = $product->get_id();
    $user_id = get_current_user_id();

    // Check if we're in a favourites context (different behavior)
    $is_favourites_context = apply_filters('bsawesome_favourites_context', false);

    $config_code = null;

    // Priority order for config code detection
    if ($is_favourites_context) {
        global $bsawesome_current_favourite_config;
        if (isset($bsawesome_current_favourite_config)) {
            $config_code = $bsawesome_current_favourite_config;
        }
    }

    // Fallback: Check URL parameters for configuration
    if (!$config_code) {
        if (isset($_GET['load_config']) && !empty($_GET['load_config'])) {
            $config_code = sanitize_text_field($_GET['load_config']);
        } elseif (isset($_GET['config_code']) && !empty($_GET['config_code'])) {
            $config_code = sanitize_text_field($_GET['config_code']);
        }
    }

    // Validate config code format (must be 6-character alphanumeric)
    if ($config_code && !preg_match('/^[A-Z0-9]{6}$/', $config_code)) {
        $config_code = null;
    }
}
```

### Was ENTFERNT werden kann:

**‚ùå √úberfl√ºssige Kommentare die entfernt werden k√∂nnen:**
- Wiederholung des Funktionsnamens
- Offensichtliche PHP-Syntax Erkl√§rungen
- Redundante Beschreibungen von Standard WordPress Funktionen
- Kommentare die nur den Code in Worten wiederholen

```php
// ‚ùå ENTFERNEN - offensichtlich
$product_id = $product->get_id(); // Get the product ID

// ‚ùå ENTFERNEN - redundant
echo '<div class="card">'; // Output card div

// ‚ùå ENTFERNEN - Standard WordPress Funktion
$user_id = get_current_user_id(); // Get current user ID using WordPress function
```

### √úbersetzungsregel f√ºr bestehende Kommentare:

**Deutsche Kommentare ‚Üí Englische Kommentare:**
```php
// ‚ùå DEUTSCH (umwandeln)
// Pr√ºfe, ob es sich um eine Seite handelt und ob der Seiten-Slug in der Liste steht

// ‚úÖ ENGLISCH (neue Version)
// Check if it's a page and if the page slug is in the removal list
```

### Kommentar-Qualit√§tspr√ºfung:

**Fragen Sie sich bei jedem Kommentar:**
1. **Erkl√§rt der Kommentar WARUM, nicht WAS?**
2. **Ist die Logik ohne Kommentar schwer verst√§ndlich?**
3. **Enth√§lt der Kommentar Business Logic oder technische Entscheidungen?**
4. **W√ºrde ein neuer Entwickler diesen Code ohne Kommentar verstehen?**

**Wenn JA ‚Üí Kommentar beibehalten und ins Englische √ºbersetzen**
**Wenn NEIN ‚Üí Kommentar entfernen**

## 13. DRY-Prinzip in der Dokumentation (KRITISCH!)

### H√§ufige Redundanzen vermeiden

**‚ùå Typische Wiederholungen:**
- Funktionalit√§t sowohl im Datei-Header als auch in Funktions-DocBlock beschreiben
- Dependencies mehrfach auflisten (DocBlock + Code sichtbar)
- Gleiche technische Details in verschiedenen Abschnitten
- @example Bl√∂cke f√ºr selbsterkl√§rende, einfache Funktionen
- Inline-Kommentare die das Offensichtliche wiederholen

**‚úÖ DRY-L√∂sungen:**

### Single-Function Dateien
```php
<?php defined('ABSPATH') || exit;

/**
 * Zendesk Chat Integration for BadSpiegel Theme
 *
 * Floating chat button with German localization and intelligent page exclusions.
 *
 * Technical Implementation:
 * - Bootstrap dark button positioned bottom-right
 * - Excluded from checkout/cart to prevent purchase flow disruption
 * - Font Awesome message icon with accessibility attributes
 *
 * @return void Outputs HTML chat button and Zendesk script
 */

function zendesk_chat() {
    if (is_checkout() || is_cart()) {  // Code ist selbsterkl√§rend
        return;
    }
    // ... rest of function
}
```

### Multi-Function Dateien
```php
<?php defined('ABSPATH') || exit;

/**
 * Modal Content AJAX Handler - DRY Version
 *
 * Handles secure AJAX requests with comprehensive security measures.
 * All technical details, dependencies, and examples are documented once
 * in relevant function DocBlocks to avoid repetition.
 */

/**
 * Verify WordPress nonce for modal requests
 *
 * Dependencies: wp_verify_nonce(), sanitize_text_field()
 */
function verify_modal_nonce() { ... }
```

### DRY-Checkliste f√ºr jede Datei:
- [ ] Information nur einmal dokumentiert?
- [ ] Keine redundanten Feature-Listen?
- [ ] Dependencies nur dort erw√§hnt wo relevant?
- [ ] @example nur bei komplexen Funktionen?
- [ ] **Wichtige Inline-Kommentare beibehalten und ins Englische √ºbersetzt?**
- [ ] **√úberfl√ºssige Kommentare entfernt?**
- [ ] Single-Function = Single DocBlock?

## 14. Best Practices

### Do's
‚úÖ **Kompakte PHP-√ñffnung verwenden**: `<?php defined('ABSPATH') || exit;`
‚úÖ **DRY-Prinzip strikt befolgen** - Information nur einmal dokumentieren
‚úÖ **Single-Function = Single DocBlock** verwenden
‚úÖ **Code selbsterkl√§rend machen** statt Kommentare h√§ufen
‚úÖ **Wichtige Inline-Kommentare beibehalten** und ins Englische √ºbersetzen
‚úÖ **√úberfl√ºssige Kommentare entfernen** (offensichtliche Syntax, Redundanz)
‚úÖ **@since beibehalten** falls bereits vorhanden
‚úÖ **Chronologische Funktions-Reihenfolge** f√ºr bessere Dependency-Verwaltung
‚úÖ **Modular und DRY-Compliant** Architektur dokumentieren
‚úÖ **Unified Error Handling** beschreiben
‚úÖ **WordPress Coding Standards** befolgen
‚úÖ **Security-First Approach** in Dokumentation

### Don'ts
‚ùå **Nicht** `<?php` mit separatem Security Check verwenden wenn kompakte Form m√∂glich
‚ùå **Nicht** @since zu neuen Funktionen hinzuf√ºgen
‚ùå **Nicht** bestehende @since Tags entfernen
‚ùå **Nicht** redundante Dokumentation (Datei + Funktion bei Single-Function)
‚ùå **Nicht** Dependencies mehrfach auflisten
‚ùå **Nicht** selbsterkl√§renden Code kommentieren
‚ùå **Nicht** wichtige Inline-Kommentare entfernen (Business Logic, Sicherheit, Performance)
‚ùå **Nicht** deutsche Kommentare beibehalten - ins Englische √ºbersetzen
‚ùå **Nicht** @example f√ºr triviale Funktionen
‚ùå **Nicht** Funktionen ohne DocBlock
‚ùå **Nicht** vage oder unvollst√§ndige Beschreibungen
‚ùå **Nicht** fehlende Parameter-Dokumentation
‚ùå **Nicht** undokumentierte Sicherheitsma√ünahmen
‚ùå **Nicht** vergessen WP_Error M√∂glichkeiten zu erw√§hnen

## Fazit

Diese Dokumentations-Standards basieren auf der hervorragenden Dokumentation in `modal.php` und wurden durch DRY-Prinzipien aus `zendesk.php` optimiert. Besonderer Fokus liegt auf der Vermeidung redundanter Dokumentation bei Single-Function Dateien.

**Kernprinzipien:**
- **DRY-First**: Information nur einmal dokumentieren
- **Context-Aware**: Single-Function vs. Multi-Function Dateien unterschiedlich behandeln
- **Smart Inline Comments**: Wichtige Inline-Kommentare beibehalten, √ºberfl√ºssige entfernen
- **English Documentation**: Alle Kommentare auf Englisch (deutsche √ºbersetzen)
- **WordPress Standards**: Befolgen etablierter WordPress Dokumentations-Praktiken

Konsistente, DRY-konforme Dokumentation mit intelligenter Inline-Kommentierung verbessert die Wartbarkeit, reduziert Pflege-Aufwand und erh√∂ht die Entwicklererfahrung erheblich.
