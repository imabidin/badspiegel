


// /**
//  * Zeigt benutzerdefinierte Konfigurationsdaten im Warenkorb und an der Kasse an.
//  */
// add_filter('woocommerce_get_item_data', 'product_configurator_display_cart_item_options', 10, 2);
// function product_configurator_display_cart_item_options($item_data, $cart_item)
// {
//     // Einstellungen zur Steuerung der Preis- und Optionsanzeige
//     $show_additional_price = true; // Zeige Preis in Klammern für Nicht-Preis-Optionen
//     $show_additional_price_for_type_price = false; // Zeige Preis für Optionen mit Typ 'price'

//     if (isset($cart_item['custom_configurator'])) {
//         $product = wc_get_product($cart_item['product_id']);
//         $product_options = get_product_options($product);

//         foreach ($product_options as $option) {
//             $option_label = $option['label']; // Beschriftung der Option
//             $option_name = sanitize_title($option_label); // Interner Name der Option
//             $option_type = $option['type'] ?? ''; // Typ der Option ('price', 'select', etc.)
//             $option_options = $option['options'] ?? []; // Mögliche Werte der Option

//             if (isset($cart_item['custom_configurator'][$option_name])) {
//                 // Wenn Preis deaktiviert ist und der Typ 'price' ist, überspringen
//                 if (!$show_additional_price && $option_type === 'price') {
//                     continue;
//                 }

//                 $value = $cart_item['custom_configurator'][$option_name]; // Gewählter Wert der Option

//                 // Hole das Label für den Wert oder nutze den Originalwert
//                 $option_value = $option_options[$value]['label'] ?? $value;

//                 // Berechne den Preis der Option, falls vorhanden
//                 $option_price = isset($option_options[$value]['price']) ? floatval($option_options[$value]['price']) : 0;

//                 // Formatierter Preis für die Anzeige
//                 $formatted_price = $option_price > 0 ? wc_price($option_price) : '';

//                 // Bedingte Anzeige basierend auf dem Typ der Option
//                 if ($option_type === 'price') {
//                     // Nur das Label anzeigen
//                     $item_value = $option_value;
//                     if ($show_additional_price_for_type_price && $formatted_price) {
//                         $item_value .= ' (' . $formatted_price . ')';
//                     }
//                 } else {
//                     // Label und optional den Preis anzeigen
//                     $item_value = $option_value;
//                     if ($show_additional_price && $formatted_price) {
//                         $item_value .= ' (' . __('+', 'your-text-domain') . '' . $formatted_price . ')';
//                     }
//                 }

//                 // Füge die Option und ihren Wert in die Item-Daten ein
//                 $item_data[] = [
//                     'name'  => $option_label, // Beschriftung der Option
//                     'value' => $item_value,   // Wert und optionaler Preis
//                 ];
//             }
//         }
//     }

//     return $item_data;
// }

// /**
//  * Aktualisiert den Preis im Warenkorb basierend auf Konfigurationsdaten.
//  */
// add_action('woocommerce_before_calculate_totals', 'add_custom_configurator_price', 10, 1);
// function add_custom_configurator_price($cart)
// {
//     if (is_admin() && ! defined('DOING_AJAX')) {
//         return;
//     }

//     // Sicherstellen, dass die Preise nur einmal angepasst werden
//     if (did_action('woocommerce_before_calculate_totals') >= 2) {
//         return;
//     }

//     // Iteriere durch alle Warenkorb-Elemente
//     foreach ($cart->get_cart() as $cart_item) {
//         if (isset($cart_item['custom_configurator'])) {
//             $product         = wc_get_product($cart_item['product_id']);
//             $product_options = get_product_options($product);
//             $additional_price = 0;

//             foreach ($product_options as $option) {
//                 $option_name = sanitize_title($option['label']);

//                 if (isset($cart_item['custom_configurator'][$option_name])) {
//                     $value = $cart_item['custom_configurator'][$option_name];

//                     if (in_array($option['type'], array('select', 'radio'), true) && isset($option['options'][$value])) {
//                         $additional_price += isset($option['options'][$value]['price'])
//                             ? floatval($option['options'][$value]['price'])
//                             : 0;
//                     } else {
//                         if (isset($option['options'][$value]['price'])) {
//                             $additional_price += floatval($option['options'][$value]['price']);
//                         }
//                     }
//                 }
//             }

//             // Setze den neuen Preis
//             $original_price = floatval($product->get_price());
//             $new_price      = $original_price + $additional_price;

//             // Setze den neuen Preis für das Produkt im Warenkorb
//             $cart_item['data']->set_price($new_price);
//         }
//     }
// }

// /**
//  * Speichert benutzerdefinierte Konfigurationsdaten in der Bestellung.
//  */
// add_action('woocommerce_checkout_create_order_line_item', 'product_configurator_add_options_to_order_item', 10, 4);
// function product_configurator_add_options_to_order_item($item, $cart_item_key, $values, $order)
// {
//     if (isset($values['custom_configurator'])) {
//         $product         = wc_get_product($values['product_id']);
//         $product_options = get_product_options($product);

//         foreach ($product_options as $option) {
//             $option_label   = $option['label'];
//             $option_name    = sanitize_title($option_label); // Sanitization des Labels
//             $option_type    = $option['type'];
//             $option_options = isset($option['options']) ? $option['options'] : array();

//             if (isset($values['custom_configurator'][$option_name])) {
//                 $value = $values['custom_configurator'][$option_name];

//                 if (in_array($option_type, array('select', 'radio'), true) && isset($option_options[$value])) {
//                     $option_value = $option_options[$value]['label'];
//                 } else {
//                     $option_value = $value;
//                 }

//                 $item->add_meta_data($option_label, $option_value);
//             }
//         }
//     }
// }

// add_filter('woocommerce_cart_item_name', 'my_edit_link_for_configured_products', 10, 3);
// function my_edit_link_for_configured_products($product_name, $cart_item, $cart_item_key)
// {
//     // Nur wenn es unsere Konfigurations-Daten gibt
//     if (isset($cart_item['custom_configurator'])) {
//         // Produkt-ID aus dem Cart-Item holen
//         $product_id = $cart_item['product_id'];

//         // Basis-URL zur Einzelproduktseite ermitteln
//         $product_url = get_permalink($product_id);

//         // Einen Parameter zum Editieren anhängen (z. B. edit_config)
//         // Hinweis: Du kannst den Parameternamen frei wählen
//         $edit_url = add_query_arg([
//             'edit_config' => $cart_item_key, // z. B. der "unique_key" oder cart_item_key
//         ], $product_url);

//         // „Bearbeiten“-Button oder Link einfügen, gern mit eigenem CSS, Icon etc.
//         $button_html = sprintf(
//             ' <a class="button edit-config-button" href="%1$s">%2$s</a>',
//             esc_url($edit_url),
//             esc_html__('Bearbeiten', 'your-textdomain')
//         );

//         // Den Button an den Produktnamen anhängen (oder du baust es in ein DIV o. Ä.)
//         $product_name .= $button_html;
//     }

//     return $product_name;
// }
// add_action( 'woocommerce_before_add_to_cart_button', 'my_pre_select_config_fields' );
// function my_pre_select_config_fields() {
//     // Prüfen, ob wir den Parameter edit_config in der URL haben
//     if ( isset($_GET['edit_config']) ) {
//         $cart_item_key = sanitize_text_field( $_GET['edit_config'] );
//         $cart          = WC()->cart->get_cart();

//         // Schauen, ob das Key existiert
//         if ( isset($cart[$cart_item_key]) && isset($cart[$cart_item_key]['custom_configurator']) ) {
//             $config_data = $cart[$cart_item_key]['custom_configurator'];

//             // Beispiel: Global eine Variable setzen, die wir im Template abfragen
//             global $my_preconfig_data;
//             $my_preconfig_data = $config_data;
//         }
//     }
// }
// add_action( 'woocommerce_add_to_cart', 'my_remove_old_cart_item_after_edit', 10, 6 );
// function my_remove_old_cart_item_after_edit( $cart_item_key, $product_id, $quantity, $variation_id, $variation, $cart_item_data ) {

//     if ( isset($_GET['edit_config']) ) {
//         $old_key = sanitize_text_field( $_GET['edit_config'] );

//         // Nur entfernen, wenn das alte Cart-Item noch existiert
//         if ( WC()->cart->find_product_in_cart( $old_key ) ) {
//             WC()->cart->remove_cart_item( $old_key );
//         }
//     }
// }


/**
 * Validierung von Produktkonfigurationsoptionen beim Hinzufügen in den Warenkorb.
 */
// add_filter('woocommerce_add_to_cart_validation', 'product_configurator_validate_options', 10, 3);
// function product_configurator_validate_options($passed, $product_id, $qty)
// {
//     $product         = wc_get_product($product_id);
//     $product_options = get_product_options($product);

//     if (! empty($product_options)) {
//         foreach ($product_options as $option) {
//             $option_label    = $option['label'];
//             $option_name     = sanitize_title($option_label); // Sanitization des Labels
//             $option_required = isset($option['required']) ? $option['required'] : false;
//             $option_type     = $option['type'];

//             $value = isset($_POST[$option_name]) ? sanitize_text_field($_POST[$option_name]) : '';

//             // Überprüfung auf erforderliche Felder
//             if ($option_required && empty($value)) {
//                 wc_add_notice(
//                     sprintf(__('%s is a required field.', 'my-product-configurator'), $option_label),
//                     'error'
//                 );
//                 $passed = false;
//             }

//             // Überprüfung auf gültige Zahlen für numerische Felder
//             if ('number' === $option_type && '' !== $value) {
//                 if (! is_numeric($value) || floatval($value) <= 0) {
//                     wc_add_notice(
//                         sprintf(__('%s must be a positive number.', 'my-product-configurator'), $option_label),
//                         'error'
//                     );
//                     $passed = false;
//                 }
//             }
//         }
//     }

//     return $passed;
// }